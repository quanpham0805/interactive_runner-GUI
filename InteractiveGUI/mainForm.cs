using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace InteractiveGUI
{
    public partial class mainForm : Form
    {
        public mainForm()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            lblInstruction.Text = "1. Select testing_tool.py file (download from GCJ interactive problem).";
            lblInstruction.Text += Environment.NewLine;
            lblInstruction.Text += "2. Select your solution file. It must have .cpp/.CPP extension.";
            lblInstruction.Text += Environment.NewLine;
            lblInstruction.Text += "3. Choose your test set.";
            lblInstruction.Text += Environment.NewLine;
            lblInstruction.Text += "4. Click \"Judge\" button and wait for a while.";
            lblInstruction.Text += Environment.NewLine;
            lblInstruction.Text += "5. If everything went well, you'll see the verdict 😉";
        }

        private void btnTestingDirSelector_Click(object sender, EventArgs e)
        {
            OpenFileDialog fbd = new OpenFileDialog();
            fbd.ShowDialog();
            txtTestingToolDir.Text = fbd.FileName;
        }

        private void btnSolutionDirSelector_Click(object sender, EventArgs e)
        {
            OpenFileDialog fbd = new OpenFileDialog();
            fbd.ShowDialog();
            txtSolutionFileDir.Text = fbd.FileName;
        }

        private void changeState()
        {
            txtSolutionFileDir.ReadOnly = !txtSolutionFileDir.ReadOnly;
            txtTestingToolDir.ReadOnly = !txtTestingToolDir.ReadOnly;
            btnSolutionDirSelector.Enabled = !btnSolutionDirSelector.Enabled;
            btnTestingDirSelector.Enabled = !btnTestingDirSelector.Enabled;
            btnJudge.Enabled = !btnJudge.Enabled;
        }

        private void setValue(ref ProcessStartInfo processInfo, string fileName, string args)
        {
            processInfo.FileName = fileName;
            processInfo.Arguments = args;
            processInfo.UseShellExecute = false; // Do not use OS shell
            processInfo.CreateNoWindow = true; // We don't need new window
            processInfo.RedirectStandardOutput = true; // Any output, generated by application will be redirected back
            processInfo.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
        }

        private void btnJudge_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtTestingToolDir.Text) || string.IsNullOrWhiteSpace(txtTestingToolDir.Text))
            {
                if (MessageBox.Show("Empty directory is not allowed!", "Warning", MessageBoxButtons.OK) == DialogResult.OK)
                {
                    return;
                }
            }
            if (Path.GetExtension(txtTestingToolDir.Text).ToLower() != ".py")
            {
                if (MessageBox.Show("Testing file is not a .py file!", "Warning", MessageBoxButtons.OK) == DialogResult.OK)
                {
                    return;
                }
            }
            if (string.IsNullOrEmpty(txtSolutionFileDir.Text) || string.IsNullOrWhiteSpace(txtSolutionFileDir.Text))
            {
                if (MessageBox.Show("Empty directory is not allowed!", "Warning", MessageBoxButtons.OK) == DialogResult.OK)
                {
                    return;
                }
            }
            if (Path.GetExtension(txtSolutionFileDir.Text).ToLower() != ".cpp")
            {
                if (MessageBox.Show("Solution file is not a .cpp file!", "Warning", MessageBoxButtons.OK) == DialogResult.OK)
                {
                    return;
                }
            }
            int testSet;
            if (rbtn1.Checked) testSet = 0;
            else testSet = 1;
               
            
            string TestingToolDirectory = txtTestingToolDir.Text;
            string SolutionDirectory = txtSolutionFileDir.Text;
            changeState();
            File.Delete(Path.GetDirectoryName(SolutionDirectory) + "\\" + Path.GetFileNameWithoutExtension(SolutionDirectory) + ".exe");
              
            ////////////////////////////////////compile C++///////////////////////////////////
            // g++ -std=c++14 -O2 zzz.cpp -o zzz
            ProcessStartInfo startCompilingCPP = new ProcessStartInfo();
            string gcc = Path.Combine(Directory.GetCurrentDirectory(), @"MinGW\\bin", "g++.exe");
            txtVerdict.Text = gcc;
            string compileCPP = string.Format("-std=c++14 -O2 {0} -o {1}", SolutionDirectory, Path.GetDirectoryName(SolutionDirectory) + "\\" + Path.GetFileNameWithoutExtension(SolutionDirectory));
            setValue(ref startCompilingCPP, gcc, compileCPP);
            Process process = new Process();
            process.StartInfo = startCompilingCPP;
            process.Start();
            while (!process.HasExited)
            {
                Application.DoEvents();
                txtVerdict.Text = "Compiling your solution........";
            }
            txtVerdict.Text = process.StandardError.ReadToEnd() + Environment.NewLine;
            //////////////////////////////////////////////////////////////////////////////////


            //////////////////////////////////////run/////////////////////////////////////////
            string python = Path.Combine(Directory.GetCurrentDirectory(), @"Python37-32", "python.exe");
            string interactive_runner = Path.Combine(Directory.GetCurrentDirectory(), "interactive_runner.py");
            string compilePython = string.Format("{0} {1} {2} {3} -- {4}", interactive_runner, python, TestingToolDirectory, testSet, Path.GetDirectoryName(SolutionDirectory) + "\\" + Path.GetFileNameWithoutExtension(SolutionDirectory));
            ProcessStartInfo startCompilingPython = new ProcessStartInfo();
            setValue(ref startCompilingPython, python, compilePython);
            //txtVerdict.Text = compilePython;

            using (Process pyProcess = Process.Start(startCompilingPython))
            {
                using (StreamReader reader = pyProcess.StandardOutput)
                {
                    string stderr = pyProcess.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    txtVerdict.Text += stderr + Environment.NewLine + result;
                }
            }
            /////////////////////////////////////////////////////////////////////////////////
            changeState();
        }
    }
}
